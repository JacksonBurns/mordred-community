name: Continuous Integration
on:
  schedule:
    - cron: "0 8 * * 1-5"
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: actions-id-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}
    name: ${{ matrix.os }} Python ${{ matrix.python-version }} Subtest
    steps:
      - uses: actions/checkout@v3
      - uses: mamba-org/setup-micromamba@main
        with:
          environment-name: temp
          condarc: |
            channels:
              - defaults
              - conda-forge
            channel_priority: flexible
          create-args: |
            python=${{ matrix.python-version }}
      - name: Install Dependencies
        run: |
          python -m pip install -e .[full]
          python -m pip install coverage
      - name: Run Tests
        run: |
          coverage run --source=. -m unittest discover -v
      - name: Show Coverage
        run: |
          coverage report -m
  check-for-new-release:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v3
      - name: Check PyPI version
        uses: maybe-hello-world/pyproject-check-version@v3
        id: versioncheck
        with:
          pyproject-path: "./pyproject.toml"
    
      - name: Report Results
        run: |
            echo "New Release found? ${{ steps.versioncheck.outputs.local_version_is_higher }}"
            echo "Local version: ${{ steps.versioncheck.outputs.local_version }}"
            echo "Public version: ${{ steps.versioncheck.outputs.public_version }}"
    outputs:
      do_publish: ${{ steps.versioncheck.outputs.local_version_is_higher }} 
  pypi-package:
    name: Build and publish Python 🐍 distributions 📦 to PyPI
    runs-on: ubuntu-latest
    needs: check-for-new-release
    if: ${{ needs.check-for-new-release.outputs.do_publish == 'true' && github.ref == 'refs/heads/main' && github.repository == 'JacksonBurns/mordred-community'}}
    steps:
    - uses: actions/checkout@master
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install pypa/build
      run: >-
        python -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: >-
        python -m
        build
        --sdist
        --wheel
        --outdir dist/
        .
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true
        verbose: true
  conda-package:
    name: Build and publish Conda distrbutions
    needs: pypi-package  # wait for pypi build to finish
    runs-on: ubuntu-latest
    defaults:
        run:
            shell: bash -el {0}  # login bash for conda calls
    steps:
    - uses: actions/checkout@master
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Setup miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-activate-base: true
        activate-environment: ""
    - name: Install build dependencies
      run: |
        conda install conda-build anaconda-client
        conda install -c conda-forge grayskull
        conda config --set anaconda_upload yes
    - name: Build and Push mordred-community
      env:
        ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
      run: |
        cd ..
        sleep 60s  # wait for the PyPI package to be visible
        grayskull pypi mordred-community
        cd mordred-community
        conda build .
  ci-report-status:
    name: report CI status
    needs: [build-and-test, pypi-package, conda-package]
    runs-on: ubuntu-latest
    steps:
      - run: |
          result1="${{ needs.build.build-and-test }}"
          result2="${{ needs.build.pypi-package }}"
          result3="${{ needs.build.conda-package }}"
          if [[ $result1 == "success" ]] && [[ $result2 == "success" || $result2 == "skipped" ]] && [[ $result3 == "success" || $result3 == "skipped" ]]; then
            exit 0
          else
            exit 1
          fi
        